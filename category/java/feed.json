{
    "version": "https://jsonfeed.org/version/1",
    "title": "我的随笔 • All posts by \"java\" category",
    "description": "alicesoft赛高！",
    "home_page_url": "http://qingz.top",
    "items": [
        {
            "id": "http://qingz.top/2021/11/09/java/jvm/JVM/",
            "url": "http://qingz.top/2021/11/09/java/jvm/JVM/",
            "title": "类加载介绍",
            "date_published": "2021-11-09T15:03:02.000Z",
            "content_html": "<h1 id=\"类加载过程\"><a class=\"markdownIt-Anchor\" href=\"#类加载过程\">#</a> 类加载过程</h1>\n<h2 id=\"123\"><a class=\"markdownIt-Anchor\" href=\"#123\">#</a> 123</h2>\n<p>在将一个  <code>.java</code>  编译成  <code>.class</code>  并加载到  <code>JVM</code>  时，会经历如下过程：</p>\n<img data-src=\"G:\\我的坚果云\\笔记\\WEB\\后端\\底层\\JVM\\类加载机制\\类加载介绍\\大体微观过程.png\" style=\"zoom:67%;\" />\n<p><strong>类加载</strong> 的流程 主要有以下 <strong>五大步</strong>：</p>\n<ol>\n<li>\n<p><strong>加载</strong>：只有在使用到类时才会去加载：</p>\n<ul>\n<li>读取文件：在硬盘上查找并通过 <code>IO</code>  读入字节码文件</li>\n<li>方法调用：例如调用类的  <code>main()</code>  方法， <code>new</code>  对象等等</li>\n<li><code>Class</code>  对象生成：在加载阶段会在 <strong>内存</strong> 中生成一个代表这个类的  <code>java.lang.Class</code>  对象，作为 <strong>方法区</strong> 这个类的各种 <strong>数据的访问入口</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>验证</strong>：校验字节码文件的正确性</p>\n</li>\n<li>\n<p><strong>准备</strong>：给类的 <strong>静态变量分配内存空间</strong>，并 <strong>赋予默认值</strong>（零值）</p>\n</li>\n<li>\n<p><strong>解析</strong>：将 <strong>符号引用</strong> 替代为 <strong>直接引用</strong>，分为 <strong>静态链接</strong>（解析时执行） 和 <strong>动态链接</strong>（运行时执行），其中：</p>\n<ol>\n<li><strong>静态链接</strong>：该阶段会把一些 <strong>静态方法</strong> 对应的 <strong>符号引用</strong>（方法调用） 替换为 <strong>方法区</strong> 中对应方法所在的 <strong>内存的指针 或 句柄</strong>（直接引用）。</li>\n<li><strong>动态链接</strong>：<strong>动态链接</strong> 是在 <strong>程序运行期间</strong>（运行到 <strong>那一行方法</strong> 调用的 <strong>符号引用</strong>） 将 <strong>符号引用</strong> 替换为 <strong>直接引用</strong>。</li>\n</ol>\n</li>\n<li>\n<p><strong>初始化</strong>：对类的 <strong>静态变量</strong> 初始化为 <strong>指定的值</strong>，并执行 <strong>静态代码块</strong>。</p>\n</li>\n<li>\n<p>使用</p>\n</li>\n<li>\n<p>卸载</p>\n</li>\n</ol>\n<p>类被加载到 <strong>方法区</strong> 中后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应 <code>Class</code>  实例的引用</strong> 等信息。其中：</p>\n<ul>\n<li><strong>类加载器的引用</strong>：这个类到 <strong>类加载器实例</strong>（位于堆空间） 的引用</li>\n<li><strong>对应 <code>Class</code>  实例的引用</strong>：类加载器在加载类信息放到方法区中后，会创建一个对应的 <strong> <code>Class</code>  类型 的对象实例</strong> 放到 <strong>堆 ( <code>Heap</code> )</strong> 中，作为 开发人员 访问方法区 中类定义的 <strong>入口</strong> 和 切入点。</li>\n</ul>\n<p>我们以  <code>Math.class</code>  为例对上述的过程进行讲解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// com.qingz.jvm Math.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Math</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> initData = <span class=\"number\">666</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compute</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = (a + b) * <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Math math = <span class=\"keyword\">new</span> Math();</span><br><span class=\"line\">        math.compute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n",
            "tags": [
                "类加载"
            ]
        }
    ]
}