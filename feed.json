{
    "version": "https://jsonfeed.org/version/1",
    "title": "我的随笔",
    "subtitle": "Qingz Notebook",
    "icon": "http://qingz.top/images/favicon.ico",
    "description": "alicesoft赛高！",
    "home_page_url": "http://qingz.top",
    "items": [
        {
            "id": "http://qingz.top/java/JVM/java/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8",
            "url": "http://qingz.top/java/JVM/java/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8",
            "title": "类加载介绍",
            "date_published": "2021-11-09T15:03:02.000Z",
            "content_html": "<h1 id=\"类加载过程\"><a class=\"anchor\" href=\"#类加载过程\">#</a> 类加载过程</h1>\n<h2 id=\"123\"><a class=\"anchor\" href=\"#123\">#</a> 123</h2>\n<p>在将一个  <code>.java</code>  编译成  <code>.class</code>  并加载到  <code>JVM</code>  时，会经历如下过程：</p>\n<p>&lt;img src=&quot;大体微观过程.png&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p><strong>类加载</strong> 的流程 主要有以下 <strong>五大步</strong>：</p>\n<ol>\n<li>\n<p><strong>加载</strong>：只有在使用到类时才会去加载：</p>\n<ul>\n<li>读取文件：在硬盘上查找并通过 <code>IO</code>  读入字节码文件</li>\n<li>方法调用：例如调用类的  <code>main()</code>  方法， <code>new</code>  对象等等</li>\n<li><code>Class</code>  对象生成：在加载阶段会在 <strong>内存</strong> 中生成一个代表这个类的  <code>java.lang.Class</code>  对象，作为 <strong>方法区</strong> 这个类的各种 <strong>数据的访问入口</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>验证</strong>：校验字节码文件的正确性</p>\n</li>\n<li>\n<p><strong>准备</strong>：给类的 <strong>静态变量分配内存空间</strong>，并 <strong>赋予默认值</strong>（零值）</p>\n</li>\n<li>\n<p><strong>解析</strong>：将 <strong>符号引用</strong> 替代为 <strong>直接引用</strong>，分为 <strong>静态链接</strong>（解析时执行） 和 <strong>动态链接</strong>（运行时执行），其中：</p>\n<ol>\n<li><strong>静态链接</strong>：该阶段会把一些 <strong>静态方法</strong> 对应的 <strong>符号引用</strong>（方法调用） 替换为 <strong>方法区</strong> 中对应方法所在的 <strong>内存的指针 或 句柄</strong>（直接引用）。</li>\n<li><strong>动态链接</strong>：<strong>动态链接</strong> 是在 <strong>程序运行期间</strong>（运行到 <strong>那一行方法</strong> 调用的 <strong>符号引用</strong>） 将 <strong>符号引用</strong> 替换为 <strong>直接引用</strong>。</li>\n</ol>\n</li>\n<li>\n<p><strong>初始化</strong>：对类的 <strong>静态变量</strong> 初始化为 <strong>指定的值</strong>，并执行 <strong>静态代码块</strong>。</p>\n</li>\n<li>\n<p>使用</p>\n</li>\n<li>\n<p>卸载</p>\n</li>\n</ol>\n<p>类被加载到 <strong>方法区</strong> 中后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应 <code>Class</code>  实例的引用</strong> 等信息。其中：</p>\n<ul>\n<li><strong>类加载器的引用</strong>：这个类到 <strong>类加载器实例</strong>（位于堆空间） 的引用</li>\n<li><strong>对应 <code>Class</code>  实例的引用</strong>：类加载器在加载类信息放到方法区中后，会创建一个对应的 <strong> <code>Class</code>  类型 的对象实例</strong> 放到 <strong>堆 ( <code>Heap</code> )</strong> 中，作为 开发人员 访问方法区 中类定义的 <strong>入口</strong> 和 切入点。</li>\n</ul>\n<p>我们以  <code>Math.class</code>  为例对上述的过程进行讲解：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// com.qingz.jvm Math.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> initData <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Math</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        math<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n",
            "tags": [
                "Java",
                "JVM",
                "类加载"
            ]
        },
        {
            "id": "http://qingz.top/uncategorized/hello-world",
            "url": "http://qingz.top/uncategorized/hello-world",
            "title": "Hello World",
            "date_published": "2021-11-09T13:54:17.480Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}