{
    "version": "https://jsonfeed.org/version/1",
    "title": "我的随笔",
    "subtitle": "Qingz Notebook",
    "icon": "http://qingz.top/images/favicon.ico",
    "description": "alicesoft赛高！",
    "home_page_url": "http://qingz.top",
    "items": [
        {
            "id": "http://qingz.top/game-dev/unity/%E5%B7%A5%E5%85%B7%E4%B8%8A%E6%89%8B/",
            "url": "http://qingz.top/game-dev/unity/%E5%B7%A5%E5%85%B7%E4%B8%8A%E6%89%8B/",
            "title": "工具上手",
            "date_published": "2021-11-14T15:03:02.000Z",
            "content_html": "<h1 id=\"工具上手\"><a class=\"anchor\" href=\"#工具上手\">#</a> 工具上手</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>要向进行  <code>Unity3D</code>  的游戏开发，会接触到如下的 <strong>技术栈</strong>：</p>\n<ul>\n<li><code>C#</code></li>\n<li><code>Lua</code></li>\n<li><code>Unity3D</code>  工具</li>\n</ul>\n<p>上述只是暂时能够列举的技术栈，后续会继续更新。我们要安装 游戏开发时所需要的  <code>IDE</code> 。</p>\n<hr />\n<h2 id=\"unity3d-安装\"><a class=\"anchor\" href=\"#unity3d-安装\">#</a> Unity3D 安装</h2>\n<p><code>Unity3D</code>  的版本非常多，不易管理，一般我们会选择首先安装  <code>Unity Hub </code> 进行 <strong> <code>Unity</code>  版本管理</strong> 与 <strong>项目搭建</strong>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wdWJsaWMtY2RuLmNsb3VkLnVuaXR5M2QuY29tL2h1Yi9wcm9kL1VuaXR5SHViU2V0dXAuZXhl\">点击下载</span></p>\n<p>打开  <code>Unity Hub</code>  后，需要进行账号的登录注册。这一步我们自己操作就好。</p>\n<p>登录之后，我们进入界面的如下位置：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0h663nej20ub0lhmy2.jpg\" alt=\"\" /></p>\n<p>进入安装界面，我们随意选择一个  <code>Unity3D</code>  版本进行安装。然后下一步，把 <strong>所有的勾选安装</strong> 都去掉。然后下一步即可进行安装。</p>\n<hr />\n<h2 id=\"rider\"><a class=\"anchor\" href=\"#rider\">#</a> Rider</h2>\n<p><code>Rider</code>  是一款由  <code>Jetbrain</code>  公司开发的  <code>C#</code> 开发工具。我们主要用它进行  <code>C#</code>  程序的开发。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9yaWRlci9kb3dubG9hZC9vdGhlci5odG1s\">点击下载</span></p>\n<p>下载安装后，我们进行破解。查看 <strong>破解教程</strong> 即可，在  <code>Xmind</code>  中有。</p>\n<p><strong>破解完毕后</strong>，我们前往  <code>File-&gt;Settings</code>  关闭以下两个功能（勾选去除）：</p>\n<ul>\n<li><code>Build,Execution,Deployment-&gt;Debugger-&gt;Enable external source debug</code> ：勾选去除</li>\n<li><code>Tools-&gt;External Symbols-&gt;Allow downloading symbols from remote locations</code> ：勾选去除</li>\n</ul>\n<p>具体图文可参考：</p>\n<ul>\n<li></li>\n</ul>\n<hr />\n<h2 id=\"项目搭建\"><a class=\"anchor\" href=\"#项目搭建\">#</a> 项目搭建</h2>\n<p>我们接下来使用   <code>Unity Hub </code>  搭建一个  <code>3D</code>  游戏项目，点击 <strong>项目 -&gt; 新项目</strong>，有以下常见的 <strong>项目搭建类型</strong>：</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/8df70646ly8gwe0hxi1o9j20ui0nztcb.jpg\" alt=\"\" /></p>\n<p>我们这里选择  <code>URP</code> ，项目相关设置自己填，然后我们打开项目，进入到  <code>Unity</code>  界面：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0ib61wlj21iq0u0jv1.jpg\" alt=\"\" /></p>\n<p>这时候，我们在左上角的  <code>File-&gt;New Scene</code>  新建一个 <strong>场景</strong>：</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/8df70646ly8gwe0iv4cevj20uo0miwi5.jpg\" alt=\"\" /></p>\n<p>到此，项目的搭建就差不多在这里结束。</p>\n<hr />\n<h2 id=\"unity3d配置\"><a class=\"anchor\" href=\"#unity3d配置\">#</a> Unity3D 配置</h2>\n<h3 id=\"布局配置\"><a class=\"anchor\" href=\"#布局配置\">#</a> 布局配置</h3>\n<p>一开始 <code>Unity3D</code>  的工具布局并非如此，我们要调整一些地方：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0jccfmaj20ey09vdgv.jpg\" alt=\"\" /></p>\n<p>然后，我们对着  <code>Project</code>  窗的下面位置选择：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/8df70646ly8gwe0jlckzxj20ek0a1my2.jpg\" alt=\"\" /></p>\n<p>我们接着呼出 控制台：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0ju9lkgj20el0g8ta8.jpg\" alt=\"\" /></p>\n<p>其他布局就自己调整</p>\n<h3 id=\"ide调整\"><a class=\"anchor\" href=\"#ide调整\">#</a> IDE 调整</h3>\n<p>我们点击  <code>Edit-Preferences</code>  调整 <code>IDE</code> ：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0k4ywvjj20qt0gpmyp.jpg\" alt=\"\" /></p>\n<p>在  <code>External Script Editor</code>  选择  <code>Rider</code>  即可。</p>\n<hr />\n<h2 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello World</h2>\n<p>我们接下来在  <code>Hierarchy</code>  窗（在当前场景）创建一个  <code>Cube</code> （正方体）：</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/8df70646ly8gwe0kg59haj20bb0edq3k.jpg\" alt=\"\" /></p>\n<p>创建后，我们能看到  <code>Cube</code>  的一些 <strong>组件信息</strong>（ <code>Inspector</code>  窗）：</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/8df70646ly8gwe0kov16lj20rj0oh0uv.jpg\" alt=\"\" /></p>\n<p>基本上， <code>Cube</code>  涵盖了一个 <strong>游戏实体</strong> 中最为主要的几个 <strong>组件</strong>：</p>\n<ul>\n<li><code>Transform</code></li>\n<li><code>Mesh Filter</code></li>\n<li><code>Mesh Renderer</code></li>\n<li><code>Box Collider</code></li>\n</ul>\n<p>这些我们不详细将，我们主要是来编写  <code>Hello World</code>  的。我们来对着这个实体添加一个 <strong>行为脚本</strong>（ <code>Behaviour Script</code> ）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/8df70646ly8gwe0leufynj20bv06bq38.jpg\" alt=\"\" /></p>\n<p>新建以后，我们双击这个脚本进入  <code>Rider</code> ：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0kzes3uj20x90fwq3y.jpg\" alt=\"\" /></p>\n<p><code>Start</code>  与  <code>Update</code>  是关于当前  <code>Cube</code>  的 <strong>生命周期回调</strong>：</p>\n<ul>\n<li><code>Start</code> ：在 <strong> <code>Cube</code>  出现的那一刻的下一帧</strong> 被调用。有且仅 <strong>执行一次</strong></li>\n<li><code>Update</code> ：在 <strong> <code>Cube</code>  出现的那一刻的下一帧</strong> 循环调用。调用的频率根据 <strong>客户端的 <code>FPS</code> </strong> 决定。</li>\n</ul>\n<p>关于 <strong>生命周期</strong> 的其他回调，我们可以看这个图：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/8df70646ly8gwe0lpka0dj20ss09uq58.jpg\" alt=\"\" /></p>\n<p>我们的  <code>Hello World</code>  可以用另一个 <strong>生命周期</strong> 函数： <code>OnEnabled</code>  去写。我们重写  <code>MonoBehaviour</code>  的  <code>OnEnabled</code>  的方法：</p>\n<pre><code class=\"language-c#\">private void OnEnable()\n&#123;\n    Debug.Log(&quot;Hello World&quot;);\n&#125;\n</code></pre>\n<p>之后我们保存，然后回到  <code>Unity3D</code>  的界面，点击上面的 <strong>三角形</strong>（ <code>Play</code> ）开始游戏，进行一下操作：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/8df70646ly8gwe0lt8gt6j21iq0u0n2b.jpg\" alt=\"\" /></p>\n<p>不难发现，当我们把 <strong>勾选</strong> 勾起来后，发现  <code>Console</code>  输出了  <code>Hello World</code> 。</p>\n",
            "tags": [
                "游戏开发",
                "Unity",
                "游戏开发",
                "Unity",
                "Rider"
            ]
        },
        {
            "id": "http://qingz.top/java/jvm/classloader/",
            "url": "http://qingz.top/java/jvm/classloader/",
            "title": "类加载介绍",
            "date_published": "2021-11-09T15:03:02.000Z",
            "content_html": "<h1 id=\"类加载介绍\"><a class=\"anchor\" href=\"#类加载介绍\">#</a> 类加载介绍</h1>\n<h2 id=\"类加载过程\"><a class=\"anchor\" href=\"#类加载过程\">#</a> 类加载过程</h2>\n<p>在将一个  <code>.java</code>  编译成  <code>.class</code>  并加载到  <code>JVM</code>  时，会经历如下过程：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/006KOSlEly8gwdxkmcitnj30ve0h3myr.jpg\" alt=\"\" /></p>\n<p><strong>类加载</strong> 的流程 主要有以下 <strong>五大步</strong>：</p>\n<ol>\n<li>\n<p><strong>加载</strong>：只有在使用到类时才会去加载：</p>\n<ul>\n<li>读取文件：在硬盘上查找并通过 <code>IO</code>  读入字节码文件</li>\n<li>方法调用：例如调用类的  <code>main()</code>  方法， <code>new</code>  对象等等</li>\n<li><code>Class</code>  对象生成：在加载阶段会在 <strong>内存</strong> 中生成一个代表这个类的  <code>java.lang.Class</code>  对象，作为 <strong>方法区</strong> 这个类的各种 <strong>数据的访问入口</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>验证</strong>：校验字节码文件的正确性</p>\n</li>\n<li>\n<p><strong>准备</strong>：给类的 <strong>静态变量分配内存空间</strong>，并 <strong>赋予默认值</strong>（零值）</p>\n</li>\n<li>\n<p><strong>解析</strong>：将 <strong>符号引用</strong> 替代为 <strong>直接引用</strong>，分为 <strong>静态链接</strong>（解析时执行） 和 <strong>动态链接</strong>（运行时执行），其中：</p>\n<ol>\n<li><strong>静态链接</strong>：该阶段会把一些 <strong>静态方法</strong> 对应的 <strong>符号引用</strong>（方法调用） 替换为 <strong>方法区</strong> 中对应方法所在的 <strong>内存的指针 或 句柄</strong>（直接引用）。</li>\n<li><strong>动态链接</strong>：<strong>动态链接</strong> 是在 <strong>程序运行期间</strong>（运行到 <strong>那一行方法</strong> 调用的 <strong>符号引用</strong>） 将 <strong>符号引用</strong> 替换为 <strong>直接引用</strong>。</li>\n</ol>\n</li>\n<li>\n<p><strong>初始化</strong>：对类的 <strong>静态变量</strong> 初始化为 <strong>指定的值</strong>，并执行 <strong>静态代码块</strong>。</p>\n</li>\n<li>\n<p>使用</p>\n</li>\n<li>\n<p>卸载</p>\n</li>\n</ol>\n<p>当一个类被加载时，会在 <strong>方法区</strong> 存储该类的相关信息，如：<strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应 <code>Class</code>  实例的引用</strong> 等，其中：</p>\n<ul>\n<li><strong>类加载器的引用</strong>：这个类到 <strong>类加载器实例</strong>（位于堆空间） 的引用</li>\n<li><strong>对应 <code>Class</code>  实例的引用</strong>：类加载器在加载类，并把相关信息数据放到方法区后，会创建一个对应的 <strong> <code>Class</code>  类型 的对象实例</strong> 放到 <strong>堆 ( <code>Heap</code> )</strong> 中，作为 开发人员 访问方法区 中类定义的 <strong>入口</strong> 和 切入点（也就是我们平常用的反射）。</li>\n</ul>\n<p>接下啦，我们以  <code>Math.class</code>  为例对上述 类加载中的 每一步过程 进行讲解：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// com.qingz.jvm Math.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> initData <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Math</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        math<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h2>\n<p>对于  <code>Math.class</code> ，我们以 <strong>16 进制（HEX）</strong> 打开其字节码文件：（VS Code 有  <code>HexDump</code>  插件，把  <code>.class</code>  拖进  <code>VS Code</code>  右键 -&gt;  <code>Show HexDump</code>  即可）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/006KOSlEly8gwdxkqzskij30jw0ihagl.jpg\" alt=\"\" /></p>\n<p><code>.class</code>  文件都基本存在  <code>CAFE、BABE</code>  这样的开头（第  <code>00000000</code>  行 开头）。这是  <code>JDK</code>  在对  <code>.java</code>  进行<strong>编译时、加载时</strong> 是有约定好的格式的。所以，在进行 <code>.class</code>  加载时，需要校验其字节码文件是否符合其加载规范（即 <code>.class</code>  文件的正确性）</p>\n<hr />\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<p>根据上述描述，给类的 <strong>静态变量分配空间</strong>，并赋予 <strong>默认值</strong>，即：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 准备阶段：public static int initData = 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> initData <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 准备阶段：public static User user = null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述两句代码在 <strong>类加载</strong> 准备时，会被赋予默认值，如： <code>initData = 0</code> ； <code>user = null</code>  等。</p>\n<p>这也是为什么我们可以直接使用 <strong>类静态变量</strong> 不需要初始化的一个原因</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeapTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 不进行初始化操作（初始化时被设置了 零值）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> aaa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 下面代码允许编译（变量未初始化）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 不进行初始化操作（该临时变量需要初始化）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> bbb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 下面代码无法被编译通过（变量未初始化）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bbb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"解析\"><a class=\"anchor\" href=\"#解析\">#</a> 解析</h2>\n<p>所谓由 <strong>符号引用</strong> 替代为  <strong>直接引用</strong>。这个概念比较抽象，我们大概对其进行一个了解即可。</p>\n<p>在  <code>IDEA</code>  的  <code>CMD</code> （ <code>.class</code>  目录下）输入如下指令（需要配置好 <code>JDK</code>  相关环境变量， <code>javap</code>  用于 <code>.class</code>  文件的反汇编）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javap -v User.class</pre></td></tr></table></figure><p>我们从输出结果中，能发现这样一些内容：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/006KOSlEly8gwdxkn3hfej30jb0i50uh.jpg\" alt=\"字节码反汇编内容\" /></p>\n<p>上述的一些 <strong>关于方法的符号</strong>（如 ） 他其实是跟我们<strong> 16 进制</strong>查看的二进制内容 是 一一对应的。</p>\n<p><strong>静态链接</strong> 在 <strong>类加载时完成</strong>，我们来看一段程序：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里，  <code>add</code>  是一个 <strong>静态方法</strong>。对于像  <code>Math.add(1,2)</code>  这种 <strong>静态方法引用</strong>（也可以称为 调用），在字节码的 <strong>常量池</strong> 中 以 <strong>符号引用</strong> 的形式进行解析。</p>\n<p>在 <strong>类加载</strong> 进行到 <strong>准备</strong> 时，会直接将 <code>Math.add(1,2)</code> （ 第 3 行 为止） 替换为 对应 调用类方法 在 <strong>元空间上的地址</strong>，也就是 <strong>直接引用</strong>。</p>\n<hr />\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<h3 id=\"简单情况\"><a class=\"anchor\" href=\"#简单情况\">#</a> 简单情况</h3>\n<p>对类的 <strong>静态变量</strong> 初始化为 <strong>指定的值</strong>，并执行 <strong>静态代码块</strong>。</p>\n<p>我们有以下程序：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDymaticLoad</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestDymaticLoad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**************load test***********\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***********Load A*************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***********initiate A*************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***********Load B*************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***********initiate B*************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码的执行过程为：</p>\n<pre><code>TestDymaticLoad\n***********Load A*************\n***********initiate A*************\n**************load test***********\n</code></pre>\n<p>从输出结果中我们能发现，</p>\n<ul>\n<li>在执行  <code>TestDymaticLoad</code>  的  <code>main</code>  方法时，当前类也算是 <strong>加载类</strong>，因此优先会加载 自己的 静态代码块</li>\n<li><code>new ()</code>  时，执行了  <code>class A</code>  的 <strong>静态代码块</strong> ，说明  <code>class A</code>  类被加载</li>\n<li><code>B b = null</code>  时， <code>class B</code>  <strong>静态代码块</strong> 并没有执行，说明  <code>class B</code>  类没有被加载</li>\n</ul>\n<p>从上述内容也说明了，<strong>类的加载是动态的</strong>，其类似于一种 <strong>懒加载</strong> 的机制。也就是 用到了才开始加载。</p>\n<h3 id=\"复杂情况\"><a class=\"anchor\" href=\"#复杂情况\">#</a> 复杂情况</h3>\n<p>遇到 <strong>继承静态方法</strong> 时:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"father\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"father-generator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>记住：</p>\n<ul>\n<li>永远以 <strong>父类加载</strong> 为第一优先级</li>\n<li>子类的构造方法 会调用父类的构造方法（隐式调用  <code>super()</code> ）</li>\n<li>如遇到 <strong>父子同名变量（ <code>name</code> ）</strong>，以 <strong>子类为最大优先级</strong>。</li>\n</ul>\n",
            "tags": [
                "Java",
                "jvm",
                "类加载"
            ]
        }
    ]
}